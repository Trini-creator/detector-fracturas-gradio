# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZvOZau-JZO0JTSxWDxvBdgQvYysZ5LJS
"""

# 1. Importar las librerías necesarias
import gradio as gr
import tensorflow as tf
from PIL import Image
import numpy as np

# 2. Cargar tu modelo de Keras/TensorFlow
# Asegúrate de que el archivo 'mi_modelo.h5' esté en la misma carpeta
try:
    modelo = tf.keras.models.load_model('mi_modelo.h5')
    print("Modelo cargado correctamente.")
except Exception as e:
    print(f"Error al cargar el modelo: {e}")
    # Si hay un error, detenemos el script para no continuar con un modelo que no funciona
    exit()

# Es una buena práctica definir las etiquetas o nombres de las clases que tu modelo predice.
# ¡IMPORTANTE! Reemplaza esto con las etiquetas reales de tu modelo y en el orden correcto.
nombres_clases = ['Gato', 'Perro', 'Pájaro'] # Ejemplo

# 3. Definir la función de predicción
# Esta función es la que Gradio llamará cada vez que un usuario suba una imagen.
def predecir_imagen(imagen):
    """
    Esta función toma una imagen de entrada, la preprocesa y devuelve las predicciones.
    """
    # El input de Gradio es una imagen PIL. Necesitamos convertirla al formato
    # que nuestro modelo espera (por ejemplo, un tamaño específico y un array de numpy).

    # a. Cambiar el tamaño de la imagen al que usaste para entrenar tu modelo (ej: 224x224)
    imagen = imagen.resize((224, 224))

    # b. Convertir la imagen a un array de numpy
    imagen_array = np.array(imagen)

    # c. Normalizar los valores de los píxeles (si lo hiciste durante el entrenamiento)
    imagen_array = imagen_array / 255.0

    # d. Añadir una dimensión extra porque el modelo espera un "lote" de imágenes (batch)
    # La forma pasará de (224, 224, 3) a (1, 224, 224, 3)
    imagen_array = np.expand_dims(imagen_array, axis=0)

    # e. Realizar la predicción
    predicciones = modelo.predict(imagen_array)

    # f. Formatear el resultado para que sea fácil de leer
    # Crearemos un diccionario con las etiquetas y sus probabilidades.
    # La función 'zip' une los nombres de las clases con sus probabilidades correspondientes.
    confianzas = {nombres_clases[i]: float(predicciones[0][i]) for i in range(len(nombres_clases))}

    print("Predicciones realizadas:", confianzas)
    return confianzas

# 4. Crear y lanzar la interfaz de Gradio
# gr.Interface define la estructura de nuestra aplicación web.
interfaz = gr.Interface(
    fn=predecir_imagen,             # La función que se ejecutará.
    inputs=gr.Image(type="pil"),    # El tipo de componente de entrada. En este caso, una caja para subir imágenes.
    outputs=gr.Label(num_top_classes=3), # El tipo de componente de salida. Muestra las clases y sus probabilidades.
    title="Clasificador de Imágenes con Keras/TF",
    description="Sube una imagen y el modelo predecirá a qué categoría pertenece. Este es un ejemplo para un modelo que clasifica Gatos, Perros y Pájaros."
)

# El método launch() inicia un pequeño servidor web local para que puedas usar la aplicación.
# con share=True obtendrás un enlace público temporal para compartirlo con otros.
interfaz.launch(share=True)